definitions:
  gin.H:
    additionalProperties: {}
    type: object
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.Task:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      description:
        type: string
      id:
        type: integer
      status:
        type: string
      title:
        type: string
      updatedAt:
        type: string
    type: object
info:
  contact: {}
paths:
  /tasks:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
      summary: Get all tasks from the database
      tags:
      - Tasks
  /tasks/:
    post:
      parameters:
      - description: Task title
        in: formData
        name: title
        required: true
        type: string
      - description: Task description
        in: formData
        name: description
        required: true
        type: string
      - description: Task status
        in: formData
        name: status
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: Create a task in db
      tags:
      - Tasks
  /tasks/{id}:
    delete:
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
      summary: Delete a task by ID
      tags:
      - Tasks
    get:
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: Get a task by ID
      tags:
      - Tasks
    put:
      parameters:
      - description: Task ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated task title
        in: formData
        name: title
        required: true
        type: string
      - description: Updated task description
        in: formData
        name: description
        required: true
        type: string
      - description: Updated task status
        in: formData
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Task'
      summary: Update a task by ID
      tags:
      - Tasks
  /tasks/paged:
    get:
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Task'
            type: array
      security:
      - jwt: []
      summary: Get paginated tasks
      tags:
      - Tasks
  /users/login:
    post:
      parameters:
      - description: Email address
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
      summary: Log in a user
      tags:
      - Users
  /users/signup:
    post:
      parameters:
      - description: Email address
        in: formData
        name: email
        required: true
        type: string
      - description: Password
        in: formData
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
      summary: Sign up a new user
      tags:
      - Users
  /users/validate:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - jwt: []
      summary: Validate the logged-in user
      tags:
      - Users
securityDefinitions:
  jwt:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
